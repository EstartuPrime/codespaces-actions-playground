# for this workflow we have to define some rules about PR on release-branches:
# 1. The name of the release-branch must be "release" or "releases" 
#    and the format is: release/[version].
#    e.g. "release/4.24.0" or "release/04.24.00" or "releases/4.24.0"
# 2. The title of the PR must contain the release candidate value like "rc1" (case insensitive)!

name: (release-candidate) Build a release candidate

on:
  pull_request:
    types: 
      - closed
    branches: 
      - 'release/**'
      - 'releases/**'

env:
  SOME_ENV: 1
  ANOTHER_ENV: Hi

jobs:
  push_to_registry:
    name: build and push after merge
    # only run if the PR is merged!
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Extract Version
        id: parse-version
        run: |
          echo "parsed_version=$(echo ${{ github.ref_name }} | grep -Eo '[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}')" >> $GITHUB_OUTPUT
      - name: Test Version
        id: define-version
        run: |
          echo "test: ${{ steps.parse-version.outputs.parsed_version }}"
          echo "rc_version=$(if[ -z '${{ steps.parse-version.outputs.parsed_version }}' ]; then echo '0.0.0'; else echo ${{ steps.parse-version.outputs.parsed_version }}; fi )" >> $GITHUB_OUTPUT
      - name: Extract RC-Value
        id: parse-value
        run: |
          echo "parsed_value=$(echo ${{ github.event.pull_request.title }} | grep -Eio 'RC[0-9]*')" >> $GITHUB_OUTPUT
      - name: Test RC-Value
        id: define-rcvalue
        run: |
          echo "test: ${{ steps.parse-value.outputs.parsed_value }}"
          echo "rc_value=$(if[ -z '${{ steps.parse-value.outputs.parsed_value }}' ]; then echo 'rc0'; else echo ${{ steps.parse-value.outputs.parsed_value }}; fi )" >> $GITHUB_OUTPUT

      - name: Final Test
        run: |
          echo "the final version can looks like this: ${{ steps.define-version.outputs.rc_version }}-${{ steps.define-rcvalue.outputs.rc_value }}"
